// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/sql/v1/cloud_sql_operations.proto

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_SQLADMIN_INTERNAL_SQL_OPERATIONS_CONNECTION_IMPL_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_SQLADMIN_INTERNAL_SQL_OPERATIONS_CONNECTION_IMPL_H

#include "google/cloud/sqladmin/internal/sql_operations_retry_traits.h"
#include "google/cloud/sqladmin/internal/sql_operations_stub.h"
#include "google/cloud/sqladmin/sql_operations_connection.h"
#include "google/cloud/sqladmin/sql_operations_connection_idempotency_policy.h"
#include "google/cloud/sqladmin/sql_operations_options.h"
#include "google/cloud/background_threads.h"
#include "google/cloud/backoff_policy.h"
#include "google/cloud/options.h"
#include "google/cloud/status_or.h"
#include "google/cloud/version.h"
#include <memory>

namespace google {
namespace cloud {
namespace sqladmin_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

class SqlOperationsServiceConnectionImpl
    : public sqladmin::SqlOperationsServiceConnection {
 public:
  ~SqlOperationsServiceConnectionImpl() override = default;

  SqlOperationsServiceConnectionImpl(
      std::unique_ptr<google::cloud::BackgroundThreads> background,
      std::shared_ptr<sqladmin_internal::SqlOperationsServiceStub> stub,
      Options options);

  Options options() override { return options_; }

  StatusOr<google::cloud::sql::v1::Operation> Get(
      google::cloud::sql::v1::SqlOperationsGetRequest const& request) override;

  StatusOr<google::cloud::sql::v1::OperationsListResponse> List(
      google::cloud::sql::v1::SqlOperationsListRequest const& request) override;

 private:
  std::unique_ptr<sqladmin::SqlOperationsServiceRetryPolicy> retry_policy() {
    auto const& options = internal::CurrentOptions();
    if (options.has<sqladmin::SqlOperationsServiceRetryPolicyOption>()) {
      return options.get<sqladmin::SqlOperationsServiceRetryPolicyOption>()
          ->clone();
    }
    return options_.get<sqladmin::SqlOperationsServiceRetryPolicyOption>()
        ->clone();
  }

  std::unique_ptr<BackoffPolicy> backoff_policy() {
    auto const& options = internal::CurrentOptions();
    if (options.has<sqladmin::SqlOperationsServiceBackoffPolicyOption>()) {
      return options.get<sqladmin::SqlOperationsServiceBackoffPolicyOption>()
          ->clone();
    }
    return options_.get<sqladmin::SqlOperationsServiceBackoffPolicyOption>()
        ->clone();
  }

  std::unique_ptr<sqladmin::SqlOperationsServiceConnectionIdempotencyPolicy>
  idempotency_policy() {
    auto const& options = internal::CurrentOptions();
    if (options
            .has<sqladmin::
                     SqlOperationsServiceConnectionIdempotencyPolicyOption>()) {
      return options
          .get<
              sqladmin::SqlOperationsServiceConnectionIdempotencyPolicyOption>()
          ->clone();
    }
    return options_
        .get<sqladmin::SqlOperationsServiceConnectionIdempotencyPolicyOption>()
        ->clone();
  }

  std::unique_ptr<google::cloud::BackgroundThreads> background_;
  std::shared_ptr<sqladmin_internal::SqlOperationsServiceStub> stub_;
  Options options_;
};

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace sqladmin_internal
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_SQLADMIN_INTERNAL_SQL_OPERATIONS_CONNECTION_IMPL_H
