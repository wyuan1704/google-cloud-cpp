// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/sql/v1/cloud_sql_ssl_certs.proto

#include "google/cloud/sqladmin/internal/sql_ssl_certs_connection_impl.h"
#include "google/cloud/sqladmin/internal/sql_ssl_certs_option_defaults.h"
#include "google/cloud/background_threads.h"
#include "google/cloud/common_options.h"
#include "google/cloud/grpc_options.h"
#include "google/cloud/internal/retry_loop.h"
#include <memory>

namespace google {
namespace cloud {
namespace sqladmin_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

SqlSslCertsServiceConnectionImpl::SqlSslCertsServiceConnectionImpl(
    std::unique_ptr<google::cloud::BackgroundThreads> background,
    std::shared_ptr<sqladmin_internal::SqlSslCertsServiceStub> stub,
    Options options)
    : background_(std::move(background)),
      stub_(std::move(stub)),
      options_(internal::MergeOptions(
          std::move(options),
          sqladmin_internal::SqlSslCertsServiceDefaultOptions(
              SqlSslCertsServiceConnection::options()))) {}

StatusOr<google::cloud::sql::v1::Operation>
SqlSslCertsServiceConnectionImpl::Delete(
    google::cloud::sql::v1::SqlSslCertsDeleteRequest const& request) {
  return google::cloud::internal::RetryLoop(
      retry_policy(), backoff_policy(), idempotency_policy()->Delete(request),
      [this](grpc::ClientContext& context,
             google::cloud::sql::v1::SqlSslCertsDeleteRequest const& request) {
        return stub_->Delete(context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::sql::v1::SslCert> SqlSslCertsServiceConnectionImpl::Get(
    google::cloud::sql::v1::SqlSslCertsGetRequest const& request) {
  return google::cloud::internal::RetryLoop(
      retry_policy(), backoff_policy(), idempotency_policy()->Get(request),
      [this](grpc::ClientContext& context,
             google::cloud::sql::v1::SqlSslCertsGetRequest const& request) {
        return stub_->Get(context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::sql::v1::SslCertsInsertResponse>
SqlSslCertsServiceConnectionImpl::Insert(
    google::cloud::sql::v1::SqlSslCertsInsertRequest const& request) {
  return google::cloud::internal::RetryLoop(
      retry_policy(), backoff_policy(), idempotency_policy()->Insert(request),
      [this](grpc::ClientContext& context,
             google::cloud::sql::v1::SqlSslCertsInsertRequest const& request) {
        return stub_->Insert(context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::sql::v1::SslCertsListResponse>
SqlSslCertsServiceConnectionImpl::List(
    google::cloud::sql::v1::SqlSslCertsListRequest const& request) {
  return google::cloud::internal::RetryLoop(
      retry_policy(), backoff_policy(), idempotency_policy()->List(request),
      [this](grpc::ClientContext& context,
             google::cloud::sql::v1::SqlSslCertsListRequest const& request) {
        return stub_->List(context, request);
      },
      request, __func__);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace sqladmin_internal
}  // namespace cloud
}  // namespace google
