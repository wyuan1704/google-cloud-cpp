// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/sql/v1/cloud_sql_backup_runs.proto

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_SQLADMIN_SQL_BACKUP_RUNS_CLIENT_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_SQLADMIN_SQL_BACKUP_RUNS_CLIENT_H

#include "google/cloud/sqladmin/sql_backup_runs_connection.h"
#include "google/cloud/future.h"
#include "google/cloud/options.h"
#include "google/cloud/polling_policy.h"
#include "google/cloud/status_or.h"
#include "google/cloud/version.h"
#include <memory>

namespace google {
namespace cloud {
namespace sqladmin {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

///
/// Service for managing database backups.
///
/// @par Equality
///
/// Instances of this class created via copy-construction or copy-assignment
/// always compare equal. Instances created with equal
/// `std::shared_ptr<*Connection>` objects compare equal. Objects that compare
/// equal share the same underlying resources.
///
/// @par Performance
///
/// Creating a new instance of this class is a relatively expensive operation,
/// new objects establish new connections to the service. In contrast,
/// copy-construction, move-construction, and the corresponding assignment
/// operations are relatively efficient as the copies share all underlying
/// resources.
///
/// @par Thread Safety
///
/// Concurrent access to different instances of this class, even if they compare
/// equal, is guaranteed to work. Two or more threads operating on the same
/// instance of this class is not guaranteed to work. Since copy-construction
/// and move-construction is a relatively efficient operation, consider using
/// such a copy when using this class from multiple threads.
///
class SqlBackupRunsServiceClient {
 public:
  explicit SqlBackupRunsServiceClient(
      std::shared_ptr<SqlBackupRunsServiceConnection> connection,
      Options opts = {});
  ~SqlBackupRunsServiceClient();

  //@{
  // @name Copy and move support
  SqlBackupRunsServiceClient(SqlBackupRunsServiceClient const&) = default;
  SqlBackupRunsServiceClient& operator=(SqlBackupRunsServiceClient const&) =
      default;
  SqlBackupRunsServiceClient(SqlBackupRunsServiceClient&&) = default;
  SqlBackupRunsServiceClient& operator=(SqlBackupRunsServiceClient&&) = default;
  //@}

  //@{
  // @name Equality
  friend bool operator==(SqlBackupRunsServiceClient const& a,
                         SqlBackupRunsServiceClient const& b) {
    return a.connection_ == b.connection_;
  }
  friend bool operator!=(SqlBackupRunsServiceClient const& a,
                         SqlBackupRunsServiceClient const& b) {
    return !(a == b);
  }
  //@}

  ///
  /// Deletes the backup taken by a backup run.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::sql::v1::SqlBackupRunsDeleteRequest,google/cloud/sql/v1/cloud_sql_backup_runs.proto#L71}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::sql::v1::Operation,google/cloud/sql/v1/cloud_sql_resources.proto#L628}
  ///
  /// [google.cloud.sql.v1.SqlBackupRunsDeleteRequest]:
  /// @googleapis_reference_link{google/cloud/sql/v1/cloud_sql_backup_runs.proto#L71}
  /// [google.cloud.sql.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/sql/v1/cloud_sql_resources.proto#L628}
  ///
  StatusOr<google::cloud::sql::v1::Operation> Delete(
      google::cloud::sql::v1::SqlBackupRunsDeleteRequest const& request,
      Options opts = {});

  ///
  /// Retrieves a resource containing information about a backup run.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::sql::v1::SqlBackupRunsGetRequest,google/cloud/sql/v1/cloud_sql_backup_runs.proto#L85}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::sql::v1::BackupRun,google/cloud/sql/v1/cloud_sql_backup_runs.proto#L125}
  ///
  /// [google.cloud.sql.v1.SqlBackupRunsGetRequest]:
  /// @googleapis_reference_link{google/cloud/sql/v1/cloud_sql_backup_runs.proto#L85}
  /// [google.cloud.sql.v1.BackupRun]:
  /// @googleapis_reference_link{google/cloud/sql/v1/cloud_sql_backup_runs.proto#L125}
  ///
  StatusOr<google::cloud::sql::v1::BackupRun> Get(
      google::cloud::sql::v1::SqlBackupRunsGetRequest const& request,
      Options opts = {});

  ///
  /// Creates a new backup run on demand.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::sql::v1::SqlBackupRunsInsertRequest,google/cloud/sql/v1/cloud_sql_backup_runs.proto#L97}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::sql::v1::Operation,google/cloud/sql/v1/cloud_sql_resources.proto#L628}
  ///
  /// [google.cloud.sql.v1.SqlBackupRunsInsertRequest]:
  /// @googleapis_reference_link{google/cloud/sql/v1/cloud_sql_backup_runs.proto#L97}
  /// [google.cloud.sql.v1.Operation]:
  /// @googleapis_reference_link{google/cloud/sql/v1/cloud_sql_resources.proto#L628}
  ///
  StatusOr<google::cloud::sql::v1::Operation> Insert(
      google::cloud::sql::v1::SqlBackupRunsInsertRequest const& request,
      Options opts = {});

  ///
  /// Lists all backup runs associated with the project or a given instance
  /// and configuration in the reverse chronological order of the backup
  /// initiation time.
  ///
  /// @param request
  /// @googleapis_link{google::cloud::sql::v1::SqlBackupRunsListRequest,google/cloud/sql/v1/cloud_sql_backup_runs.proto#L108}
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return
  /// @googleapis_link{google::cloud::sql::v1::BackupRunsListResponse,google/cloud/sql/v1/cloud_sql_backup_runs.proto#L187}
  ///
  /// [google.cloud.sql.v1.SqlBackupRunsListRequest]:
  /// @googleapis_reference_link{google/cloud/sql/v1/cloud_sql_backup_runs.proto#L108}
  /// [google.cloud.sql.v1.BackupRunsListResponse]:
  /// @googleapis_reference_link{google/cloud/sql/v1/cloud_sql_backup_runs.proto#L187}
  ///
  StatusOr<google::cloud::sql::v1::BackupRunsListResponse> List(
      google::cloud::sql::v1::SqlBackupRunsListRequest const& request,
      Options opts = {});

 private:
  std::shared_ptr<SqlBackupRunsServiceConnection> connection_;
  Options options_;
};

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace sqladmin
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_SQLADMIN_SQL_BACKUP_RUNS_CLIENT_H
