// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/sql/v1/cloud_sql_operations.proto

#include "google/cloud/sqladmin/sql_operations_connection.h"
#include "google/cloud/sqladmin/internal/sql_operations_connection_impl.h"
#include "google/cloud/sqladmin/internal/sql_operations_option_defaults.h"
#include "google/cloud/sqladmin/internal/sql_operations_stub_factory.h"
#include "google/cloud/sqladmin/sql_operations_options.h"
#include "google/cloud/background_threads.h"
#include "google/cloud/common_options.h"
#include "google/cloud/grpc_options.h"
#include <memory>

namespace google {
namespace cloud {
namespace sqladmin {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

SqlOperationsServiceConnection::~SqlOperationsServiceConnection() = default;

StatusOr<google::cloud::sql::v1::Operation> SqlOperationsServiceConnection::Get(
    google::cloud::sql::v1::SqlOperationsGetRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::sql::v1::OperationsListResponse>
SqlOperationsServiceConnection::List(
    google::cloud::sql::v1::SqlOperationsListRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

std::shared_ptr<SqlOperationsServiceConnection>
MakeSqlOperationsServiceConnection(Options options) {
  internal::CheckExpectedOptions<CommonOptionList, GrpcOptionList,
                                 SqlOperationsServicePolicyOptionList>(
      options, __func__);
  options =
      sqladmin_internal::SqlOperationsServiceDefaultOptions(std::move(options));
  auto background = internal::MakeBackgroundThreadsFactory(options)();
  auto stub = sqladmin_internal::CreateDefaultSqlOperationsServiceStub(
      background->cq(), options);
  return std::make_shared<
      sqladmin_internal::SqlOperationsServiceConnectionImpl>(
      std::move(background), std::move(stub), std::move(options));
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace sqladmin
}  // namespace cloud
}  // namespace google

namespace google {
namespace cloud {
namespace sqladmin_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

std::shared_ptr<sqladmin::SqlOperationsServiceConnection>
MakeSqlOperationsServiceConnection(
    std::shared_ptr<SqlOperationsServiceStub> stub, Options options) {
  options = SqlOperationsServiceDefaultOptions(std::move(options));
  auto background = internal::MakeBackgroundThreadsFactory(options)();
  return std::make_shared<
      sqladmin_internal::SqlOperationsServiceConnectionImpl>(
      std::move(background), std::move(stub), std::move(options));
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace sqladmin_internal
}  // namespace cloud
}  // namespace google
