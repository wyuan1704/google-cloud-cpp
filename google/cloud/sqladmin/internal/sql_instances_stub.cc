// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/sql/v1/cloud_sql_instances.proto

#include "google/cloud/sqladmin/internal/sql_instances_stub.h"
#include "google/cloud/grpc_error_delegate.h"
#include "google/cloud/status_or.h"
#include <google/cloud/sql/v1/cloud_sql_instances.grpc.pb.h>
#include <memory>

namespace google {
namespace cloud {
namespace sqladmin_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

SqlInstancesServiceStub::~SqlInstancesServiceStub() = default;

StatusOr<google::cloud::sql::v1::Operation>
DefaultSqlInstancesServiceStub::AddServerCa(
    grpc::ClientContext& client_context,
    google::cloud::sql::v1::SqlInstancesAddServerCaRequest const& request) {
  google::cloud::sql::v1::Operation response;
  auto status = grpc_stub_->AddServerCa(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::sql::v1::Operation>
DefaultSqlInstancesServiceStub::Clone(
    grpc::ClientContext& client_context,
    google::cloud::sql::v1::SqlInstancesCloneRequest const& request) {
  google::cloud::sql::v1::Operation response;
  auto status = grpc_stub_->Clone(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::sql::v1::Operation>
DefaultSqlInstancesServiceStub::Delete(
    grpc::ClientContext& client_context,
    google::cloud::sql::v1::SqlInstancesDeleteRequest const& request) {
  google::cloud::sql::v1::Operation response;
  auto status = grpc_stub_->Delete(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::sql::v1::Operation>
DefaultSqlInstancesServiceStub::DemoteMaster(
    grpc::ClientContext& client_context,
    google::cloud::sql::v1::SqlInstancesDemoteMasterRequest const& request) {
  google::cloud::sql::v1::Operation response;
  auto status = grpc_stub_->DemoteMaster(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::sql::v1::Operation>
DefaultSqlInstancesServiceStub::Export(
    grpc::ClientContext& client_context,
    google::cloud::sql::v1::SqlInstancesExportRequest const& request) {
  google::cloud::sql::v1::Operation response;
  auto status = grpc_stub_->Export(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::sql::v1::Operation>
DefaultSqlInstancesServiceStub::Failover(
    grpc::ClientContext& client_context,
    google::cloud::sql::v1::SqlInstancesFailoverRequest const& request) {
  google::cloud::sql::v1::Operation response;
  auto status = grpc_stub_->Failover(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::sql::v1::DatabaseInstance>
DefaultSqlInstancesServiceStub::Get(
    grpc::ClientContext& client_context,
    google::cloud::sql::v1::SqlInstancesGetRequest const& request) {
  google::cloud::sql::v1::DatabaseInstance response;
  auto status = grpc_stub_->Get(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::sql::v1::Operation>
DefaultSqlInstancesServiceStub::Import(
    grpc::ClientContext& client_context,
    google::cloud::sql::v1::SqlInstancesImportRequest const& request) {
  google::cloud::sql::v1::Operation response;
  auto status = grpc_stub_->Import(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::sql::v1::Operation>
DefaultSqlInstancesServiceStub::Insert(
    grpc::ClientContext& client_context,
    google::cloud::sql::v1::SqlInstancesInsertRequest const& request) {
  google::cloud::sql::v1::Operation response;
  auto status = grpc_stub_->Insert(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::sql::v1::InstancesListResponse>
DefaultSqlInstancesServiceStub::List(
    grpc::ClientContext& client_context,
    google::cloud::sql::v1::SqlInstancesListRequest const& request) {
  google::cloud::sql::v1::InstancesListResponse response;
  auto status = grpc_stub_->List(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::sql::v1::InstancesListServerCasResponse>
DefaultSqlInstancesServiceStub::ListServerCas(
    grpc::ClientContext& client_context,
    google::cloud::sql::v1::SqlInstancesListServerCasRequest const& request) {
  google::cloud::sql::v1::InstancesListServerCasResponse response;
  auto status = grpc_stub_->ListServerCas(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::sql::v1::Operation>
DefaultSqlInstancesServiceStub::Patch(
    grpc::ClientContext& client_context,
    google::cloud::sql::v1::SqlInstancesPatchRequest const& request) {
  google::cloud::sql::v1::Operation response;
  auto status = grpc_stub_->Patch(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::sql::v1::Operation>
DefaultSqlInstancesServiceStub::PromoteReplica(
    grpc::ClientContext& client_context,
    google::cloud::sql::v1::SqlInstancesPromoteReplicaRequest const& request) {
  google::cloud::sql::v1::Operation response;
  auto status = grpc_stub_->PromoteReplica(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::sql::v1::Operation>
DefaultSqlInstancesServiceStub::ResetSslConfig(
    grpc::ClientContext& client_context,
    google::cloud::sql::v1::SqlInstancesResetSslConfigRequest const& request) {
  google::cloud::sql::v1::Operation response;
  auto status = grpc_stub_->ResetSslConfig(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::sql::v1::Operation>
DefaultSqlInstancesServiceStub::Restart(
    grpc::ClientContext& client_context,
    google::cloud::sql::v1::SqlInstancesRestartRequest const& request) {
  google::cloud::sql::v1::Operation response;
  auto status = grpc_stub_->Restart(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::sql::v1::Operation>
DefaultSqlInstancesServiceStub::RestoreBackup(
    grpc::ClientContext& client_context,
    google::cloud::sql::v1::SqlInstancesRestoreBackupRequest const& request) {
  google::cloud::sql::v1::Operation response;
  auto status = grpc_stub_->RestoreBackup(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::sql::v1::Operation>
DefaultSqlInstancesServiceStub::RotateServerCa(
    grpc::ClientContext& client_context,
    google::cloud::sql::v1::SqlInstancesRotateServerCaRequest const& request) {
  google::cloud::sql::v1::Operation response;
  auto status = grpc_stub_->RotateServerCa(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::sql::v1::Operation>
DefaultSqlInstancesServiceStub::StartReplica(
    grpc::ClientContext& client_context,
    google::cloud::sql::v1::SqlInstancesStartReplicaRequest const& request) {
  google::cloud::sql::v1::Operation response;
  auto status = grpc_stub_->StartReplica(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::sql::v1::Operation>
DefaultSqlInstancesServiceStub::StopReplica(
    grpc::ClientContext& client_context,
    google::cloud::sql::v1::SqlInstancesStopReplicaRequest const& request) {
  google::cloud::sql::v1::Operation response;
  auto status = grpc_stub_->StopReplica(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::sql::v1::Operation>
DefaultSqlInstancesServiceStub::TruncateLog(
    grpc::ClientContext& client_context,
    google::cloud::sql::v1::SqlInstancesTruncateLogRequest const& request) {
  google::cloud::sql::v1::Operation response;
  auto status = grpc_stub_->TruncateLog(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::sql::v1::Operation>
DefaultSqlInstancesServiceStub::Update(
    grpc::ClientContext& client_context,
    google::cloud::sql::v1::SqlInstancesUpdateRequest const& request) {
  google::cloud::sql::v1::Operation response;
  auto status = grpc_stub_->Update(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::sql::v1::SslCert>
DefaultSqlInstancesServiceStub::CreateEphemeral(
    grpc::ClientContext& client_context,
    google::cloud::sql::v1::SqlInstancesCreateEphemeralCertRequest const&
        request) {
  google::cloud::sql::v1::SslCert response;
  auto status =
      grpc_stub_->CreateEphemeral(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::sql::v1::Operation>
DefaultSqlInstancesServiceStub::RescheduleMaintenance(
    grpc::ClientContext& client_context,
    google::cloud::sql::v1::SqlInstancesRescheduleMaintenanceRequest const&
        request) {
  google::cloud::sql::v1::Operation response;
  auto status =
      grpc_stub_->RescheduleMaintenance(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::sql::v1::SqlInstancesVerifyExternalSyncSettingsResponse>
DefaultSqlInstancesServiceStub::VerifyExternalSyncSettings(
    grpc::ClientContext& client_context,
    google::cloud::sql::v1::SqlInstancesVerifyExternalSyncSettingsRequest const&
        request) {
  google::cloud::sql::v1::SqlInstancesVerifyExternalSyncSettingsResponse
      response;
  auto status = grpc_stub_->VerifyExternalSyncSettings(&client_context, request,
                                                       &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::sql::v1::Operation>
DefaultSqlInstancesServiceStub::StartExternalSync(
    grpc::ClientContext& client_context,
    google::cloud::sql::v1::SqlInstancesStartExternalSyncRequest const&
        request) {
  google::cloud::sql::v1::Operation response;
  auto status =
      grpc_stub_->StartExternalSync(&client_context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace sqladmin_internal
}  // namespace cloud
}  // namespace google
