// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/sql/v1/cloud_sql_users.proto

#include "google/cloud/sqladmin/sql_users_connection_idempotency_policy.h"
#include "absl/memory/memory.h"
#include <memory>

namespace google {
namespace cloud {
namespace sqladmin {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

using ::google::cloud::Idempotency;

SqlUsersServiceConnectionIdempotencyPolicy::
    ~SqlUsersServiceConnectionIdempotencyPolicy() = default;

namespace {
class DefaultSqlUsersServiceConnectionIdempotencyPolicy
    : public SqlUsersServiceConnectionIdempotencyPolicy {
 public:
  ~DefaultSqlUsersServiceConnectionIdempotencyPolicy() override = default;

  /// Create a new copy of this object.
  std::unique_ptr<SqlUsersServiceConnectionIdempotencyPolicy> clone()
      const override {
    return absl::make_unique<DefaultSqlUsersServiceConnectionIdempotencyPolicy>(
        *this);
  }

  Idempotency Delete(
      google::cloud::sql::v1::SqlUsersDeleteRequest const&) override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency Insert(
      google::cloud::sql::v1::SqlUsersInsertRequest const&) override {
    return Idempotency::kNonIdempotent;
  }

  Idempotency List(
      google::cloud::sql::v1::SqlUsersListRequest const&) override {
    return Idempotency::kIdempotent;
  }

  Idempotency Update(
      google::cloud::sql::v1::SqlUsersUpdateRequest const&) override {
    return Idempotency::kIdempotent;
  }
};
}  // namespace

std::unique_ptr<SqlUsersServiceConnectionIdempotencyPolicy>
MakeDefaultSqlUsersServiceConnectionIdempotencyPolicy() {
  return absl::make_unique<DefaultSqlUsersServiceConnectionIdempotencyPolicy>();
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace sqladmin
}  // namespace cloud
}  // namespace google
