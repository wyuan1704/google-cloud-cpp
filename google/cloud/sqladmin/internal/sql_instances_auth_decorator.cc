// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/sql/v1/cloud_sql_instances.proto

#include "google/cloud/sqladmin/internal/sql_instances_auth_decorator.h"
#include <google/cloud/sql/v1/cloud_sql_instances.grpc.pb.h>
#include <memory>

namespace google {
namespace cloud {
namespace sqladmin_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

SqlInstancesServiceAuth::SqlInstancesServiceAuth(
    std::shared_ptr<google::cloud::internal::GrpcAuthenticationStrategy> auth,
    std::shared_ptr<SqlInstancesServiceStub> child)
    : auth_(std::move(auth)), child_(std::move(child)) {}

StatusOr<google::cloud::sql::v1::Operation>
SqlInstancesServiceAuth::AddServerCa(
    grpc::ClientContext& context,
    google::cloud::sql::v1::SqlInstancesAddServerCaRequest const& request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->AddServerCa(context, request);
}

StatusOr<google::cloud::sql::v1::Operation> SqlInstancesServiceAuth::Clone(
    grpc::ClientContext& context,
    google::cloud::sql::v1::SqlInstancesCloneRequest const& request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->Clone(context, request);
}

StatusOr<google::cloud::sql::v1::Operation> SqlInstancesServiceAuth::Delete(
    grpc::ClientContext& context,
    google::cloud::sql::v1::SqlInstancesDeleteRequest const& request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->Delete(context, request);
}

StatusOr<google::cloud::sql::v1::Operation>
SqlInstancesServiceAuth::DemoteMaster(
    grpc::ClientContext& context,
    google::cloud::sql::v1::SqlInstancesDemoteMasterRequest const& request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->DemoteMaster(context, request);
}

StatusOr<google::cloud::sql::v1::Operation> SqlInstancesServiceAuth::Export(
    grpc::ClientContext& context,
    google::cloud::sql::v1::SqlInstancesExportRequest const& request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->Export(context, request);
}

StatusOr<google::cloud::sql::v1::Operation> SqlInstancesServiceAuth::Failover(
    grpc::ClientContext& context,
    google::cloud::sql::v1::SqlInstancesFailoverRequest const& request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->Failover(context, request);
}

StatusOr<google::cloud::sql::v1::DatabaseInstance> SqlInstancesServiceAuth::Get(
    grpc::ClientContext& context,
    google::cloud::sql::v1::SqlInstancesGetRequest const& request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->Get(context, request);
}

StatusOr<google::cloud::sql::v1::Operation> SqlInstancesServiceAuth::Import(
    grpc::ClientContext& context,
    google::cloud::sql::v1::SqlInstancesImportRequest const& request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->Import(context, request);
}

StatusOr<google::cloud::sql::v1::Operation> SqlInstancesServiceAuth::Insert(
    grpc::ClientContext& context,
    google::cloud::sql::v1::SqlInstancesInsertRequest const& request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->Insert(context, request);
}

StatusOr<google::cloud::sql::v1::InstancesListResponse>
SqlInstancesServiceAuth::List(
    grpc::ClientContext& context,
    google::cloud::sql::v1::SqlInstancesListRequest const& request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->List(context, request);
}

StatusOr<google::cloud::sql::v1::InstancesListServerCasResponse>
SqlInstancesServiceAuth::ListServerCas(
    grpc::ClientContext& context,
    google::cloud::sql::v1::SqlInstancesListServerCasRequest const& request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->ListServerCas(context, request);
}

StatusOr<google::cloud::sql::v1::Operation> SqlInstancesServiceAuth::Patch(
    grpc::ClientContext& context,
    google::cloud::sql::v1::SqlInstancesPatchRequest const& request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->Patch(context, request);
}

StatusOr<google::cloud::sql::v1::Operation>
SqlInstancesServiceAuth::PromoteReplica(
    grpc::ClientContext& context,
    google::cloud::sql::v1::SqlInstancesPromoteReplicaRequest const& request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->PromoteReplica(context, request);
}

StatusOr<google::cloud::sql::v1::Operation>
SqlInstancesServiceAuth::ResetSslConfig(
    grpc::ClientContext& context,
    google::cloud::sql::v1::SqlInstancesResetSslConfigRequest const& request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->ResetSslConfig(context, request);
}

StatusOr<google::cloud::sql::v1::Operation> SqlInstancesServiceAuth::Restart(
    grpc::ClientContext& context,
    google::cloud::sql::v1::SqlInstancesRestartRequest const& request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->Restart(context, request);
}

StatusOr<google::cloud::sql::v1::Operation>
SqlInstancesServiceAuth::RestoreBackup(
    grpc::ClientContext& context,
    google::cloud::sql::v1::SqlInstancesRestoreBackupRequest const& request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->RestoreBackup(context, request);
}

StatusOr<google::cloud::sql::v1::Operation>
SqlInstancesServiceAuth::RotateServerCa(
    grpc::ClientContext& context,
    google::cloud::sql::v1::SqlInstancesRotateServerCaRequest const& request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->RotateServerCa(context, request);
}

StatusOr<google::cloud::sql::v1::Operation>
SqlInstancesServiceAuth::StartReplica(
    grpc::ClientContext& context,
    google::cloud::sql::v1::SqlInstancesStartReplicaRequest const& request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->StartReplica(context, request);
}

StatusOr<google::cloud::sql::v1::Operation>
SqlInstancesServiceAuth::StopReplica(
    grpc::ClientContext& context,
    google::cloud::sql::v1::SqlInstancesStopReplicaRequest const& request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->StopReplica(context, request);
}

StatusOr<google::cloud::sql::v1::Operation>
SqlInstancesServiceAuth::TruncateLog(
    grpc::ClientContext& context,
    google::cloud::sql::v1::SqlInstancesTruncateLogRequest const& request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->TruncateLog(context, request);
}

StatusOr<google::cloud::sql::v1::Operation> SqlInstancesServiceAuth::Update(
    grpc::ClientContext& context,
    google::cloud::sql::v1::SqlInstancesUpdateRequest const& request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->Update(context, request);
}

StatusOr<google::cloud::sql::v1::SslCert>
SqlInstancesServiceAuth::CreateEphemeral(
    grpc::ClientContext& context,
    google::cloud::sql::v1::SqlInstancesCreateEphemeralCertRequest const&
        request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->CreateEphemeral(context, request);
}

StatusOr<google::cloud::sql::v1::Operation>
SqlInstancesServiceAuth::RescheduleMaintenance(
    grpc::ClientContext& context,
    google::cloud::sql::v1::SqlInstancesRescheduleMaintenanceRequest const&
        request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->RescheduleMaintenance(context, request);
}

StatusOr<google::cloud::sql::v1::SqlInstancesVerifyExternalSyncSettingsResponse>
SqlInstancesServiceAuth::VerifyExternalSyncSettings(
    grpc::ClientContext& context,
    google::cloud::sql::v1::SqlInstancesVerifyExternalSyncSettingsRequest const&
        request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->VerifyExternalSyncSettings(context, request);
}

StatusOr<google::cloud::sql::v1::Operation>
SqlInstancesServiceAuth::StartExternalSync(
    grpc::ClientContext& context,
    google::cloud::sql::v1::SqlInstancesStartExternalSyncRequest const&
        request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->StartExternalSync(context, request);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace sqladmin_internal
}  // namespace cloud
}  // namespace google
